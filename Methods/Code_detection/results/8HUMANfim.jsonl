{"problem_id": "p02863", "submission_id": "s279610283", "status_in_folder": "Accepted", "LLM": "Human", "code": "import sys\n\nimport numpy as np\n\nn, t = map(int, input().split())\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = [tuple(map(int, line.split())) for line in sys.stdin]\ncuisines.sort()\ntmp_ans = 0\nfor a, b in cuisines:\n    tmp_ans = max(tmp_ans, knapsack.max() + b)\n    knapsack[a:] = np.maximum(knapsack[a:], knapsack[:-a] + b)\n\nprint(max(tmp_ans, knapsack.max()))\n", "ada_embedding": "[0.03653451427817345, -0.014522608369588852, 0.00642877584323287, -0.00744784576818347, 0.005143711343407631, 0.019939223304390907, -0.010625961236655712, -0.04242093861103058, -0.015821490436792374, -0.03752940520644188, 0.027387067675590515, -0.020132673904299736, 0.003775739809498191, -3.5516310163075104e-05, -0.004179913084954023, 0.008007470518350601, 0.017341459169983864, 0.0263369083404541, 0.017935628071427345, -0.030952084809541702, 0.0013032002607360482, -0.002133137546479702, 0.01220811065286398, -0.019262146204710007, 0.008670729584991932, 0.010370329953730106, 0.019400324672460556, -0.03255496174097061, 0.02205336093902588, -0.009617255069315434, 0.01564185693860054, -0.006846766918897629, -0.0162912979722023, -0.013313542120158672, -0.023974047973752022, -0.005406251642853022, -0.004867353476583958, -0.025590742006897926, 0.02208099700510502, -0.0056377011351287365, 0.02090647630393505, -0.0026305818464607, -0.0017229188233613968, 0.01854361593723297, -0.01396989170461893, -0.00493644317612052, -0.0020277760922908783, -0.01396989170461893, -0.00987288635224104, 0.008401280269026756, 0.01489569153636694, 0.0018135987920686603, -0.053862154483795166, -0.0003637992776930332, 0.01662292890250683, -0.012864460237324238, -0.0016408750088885427, 0.011966297402977943, -0.0023317697923630476, -0.009824523702263832, 0.01620839163661003, 0.02979138307273388, -0.023531876504421234, 0.004138459451496601, 0.02666853740811348, -0.01857125200331211, -0.008318373002111912, -0.017009828239679337, 0.00022130222350824624, 0.017148008570075035, 0.032250966876745224, 0.018294893205165863, -0.029349209740757942, 0.01710655353963375, 0.044769980013370514, -0.001798053621314466, -0.015033870004117489, 0.01735527627170086, -0.010176880285143852, 0.02506566233932972, 0.017673088237643242, -0.02816087007522583, 0.01086086593568325, -0.0026927622966468334, 0.023877322673797607, 0.008643093518912792, -0.024098409339785576, 0.04374745488166809, -0.012809189036488533, -0.0226751659065485, 0.014923326671123505, -0.0015622858190909028, 0.012083749286830425, 0.011434308253228664, -0.026986349374055862, 0.018184350803494453, -0.022219175472855568, 0.0006861448637209833, -0.02343515120446682, -0.013251361437141895, -0.007668931968510151, -0.01003179233521223, -0.023725325241684914, -0.020547211170196533, -0.021873727440834045, -0.004708447959274054, -0.0045944503508508205, -0.0011797028128057718, 0.022633712738752365, 0.005931331310421228, -0.039712630212306976, 0.0012988821836188436, 0.010812503285706043, -0.021307194605469704, 0.0139837097376585, -0.021528281271457672, 0.003394020488485694, -0.01786653883755207, -0.007565297652035952, -0.0021020472049713135, 0.011144132353365421, 0.006922765634953976, 0.00642877584323287, 0.012083749286830425, 0.029211031273007393, 0.03794394060969353, -0.02360096573829651, 0.013769532553851604, -0.028547771275043488, -0.03440655767917633, 0.061959441751241684, 0.02737325057387352, -0.0024854938965290785, 0.001710828160867095, -0.010556872002780437, 0.0006377822137437761, 0.008214739151299, -0.00465663056820631, -0.014356792904436588, 0.0016002849442884326, 0.0030900267884135246, 0.03614761307835579, -0.027621973305940628, 0.0034717461094260216, -0.01718946173787117, 0.0059935119934380054, -8.760329365031794e-05, 0.02126574143767357, -0.008394371718168259, 0.0034855641424655914, 0.02183227427303791, -0.010646688751876354, 0.004884625785052776, 0.016747288405895233, 0.003924282267689705, -0.0032040243968367577, 0.023849686607718468, -0.012961185537278652, -0.017230914905667305, -0.016705835238099098, 0.0003106867370661348, -0.007703476585447788, 0.011240857653319836, -0.014771330170333385, -0.003796466626226902, 0.01648474857211113, 0.02473403327167034, 0.009230353869497776, -0.010881592519581318, -0.00625259755179286, 0.00949289370328188, 0.0025735830422490835, -0.010840138420462608, -0.0031556617468595505, 0.009050721302628517, -0.0013221998233348131, 0.030454641208052635, 0.006425321102142334, 0.0005315571324899793, 0.011911025270819664, -0.005793152377009392, -0.005568611901253462, 0.03261023387312889, 0.05190001428127289, -0.005741335451602936, -0.026267819106578827, 0.01640184223651886, 0.030233554542064667, 0.018612705171108246, 0.001067432458512485, 0.01620839163661003, 0.02349042147397995, -0.021224286407232285, -0.014439700171351433, -0.6071030497550964, -0.008884906768798828, -0.02056102827191353, -0.015185866504907608, -0.0031418439466506243, 0.008781271986663342, 0.03305240720510483, 0.015766218304634094, -0.012215019203722477, 0.008000561036169529, -0.023227881640195847, 0.012601920403540134, 0.002716943621635437, -0.02163882367312908, -0.0010717505356296897, -0.01935887150466442, 0.024153681471943855, -0.010411784052848816, -0.019137784838676453, 0.028091780841350555, -0.012719372287392616, 0.020616300404071808, -0.020837385207414627, 0.012650283053517342, -0.009403077885508537, -0.02022939920425415, -0.006912401877343655, -0.026157274842262268, -0.018502160906791687, -0.010722686536610126, -0.018129078671336174, 0.02976374700665474, -0.0206439346075058, -0.007966016419231892, 0.056819185614585876, -0.02473403327167034, -0.0148680554702878, 0.00592787703499198, 0.01046705525368452, 0.04391327127814293, -0.01170375756919384, -0.03570543974637985, -0.007751839235424995, 0.006318232510238886, -0.02351805754005909, 0.000839005340822041, -0.00508498540148139, 0.008415098302066326, -0.0006788041209802032, -0.027967419475317, 0.018778519704937935, -0.0009827978210523725, -0.004836263135075569, -0.03310767561197281, 0.022219175472855568, -0.006808768026530743, 0.0013032002607360482, -0.020436666905879974, 0.013258270919322968, -0.02208099700510502, -0.004946806468069553, 0.020685389637947083, -0.015379317104816437, -0.03161534294486046, -0.01974577270448208, 0.01236701663583517, -0.01086086593568325, -0.006269869860261679, -0.00701949093490839, -0.011164858937263489, -0.0008126649772748351, 0.006870948243886232, -0.015614221803843975, 0.002024321584030986, 0.01200084201991558, 0.02188754640519619, 0.026074368506669998, -0.029349209740757942, -0.012892096303403378, 0.00952052976936102, -0.003824102459475398, -0.007883109152317047, -0.0065773180685937405, -0.014059708453714848, 0.015959668904542923, 0.005879514385014772, 0.002528674900531769, 0.0137142613530159, -0.013216816820204258, -0.00467044860124588, 0.022992977872490883, 0.01724473387002945, 0.0027739424258470535, -0.023739144206047058, -0.010605234652757645, 0.02990192547440529, -0.025355838239192963, -0.026654720306396484, 0.023835869506001472, -0.024761667475104332, -0.032858956605196, -0.0017194643151015043, -0.009900521486997604, -0.015172049403190613, -0.010473964735865593, 0.004687720909714699, 0.01470224093645811, 0.014798966236412525, 0.021459192037582397, 0.0033767481800168753, -0.003689378034323454, -0.04482525214552879, -0.011448126286268234, -0.002165955025702715, 0.013493174687027931, -0.03164298087358475, 0.033494576811790466, 0.0009361624252051115, -0.013051002286374569, 0.014757512137293816, 0.04239330440759659, 0.040044259279966354, 0.016429478302598, -0.010584508068859577, 0.016056394204497337, 0.02748379297554493, 0.023200245574116707, -0.012249563820660114, -0.04808627441525459, -0.014494972303509712, -0.0064564114436507225, -0.0017367367399856448, 0.009403077885508537, -0.03308004140853882, 0.017009828239679337, -0.008069651201367378, 0.014315339736640453, -0.015379317104816437, 0.03606470674276352, -0.03609234094619751, -0.0011529306648299098, -0.004601358901709318, 0.003407838521525264, -0.01952468603849411, -0.01667819917201996, -0.0024716760963201523, -0.01963522844016552, 0.0027532156091183424, -0.007150760851800442, 0.00685713067650795, 0.010446328669786453, -0.013278997503221035, -0.020975565537810326, -0.030288826674222946, 0.025079479441046715, -0.027110710740089417, -0.002884485526010394, 0.003896646434441209, 0.006556591484695673, -0.013797168619930744, -0.0021175923757255077, 0.004200640134513378, -0.011171768419444561, 0.0010415238793939352, -0.011441217735409737, -0.007986743003129959, -0.008007470518350601, 0.0040624612011015415, 0.006888220552355051, -0.04029298201203346, 0.00449427030980587, -0.014550243504345417, -0.006729315035045147, 0.014771330170333385, -0.01730000413954258, 0.003972644917666912, -0.0217217318713665, 0.012643374502658844, 0.0010346148628741503, -0.014591697603464127, 0.0007129170116968453, -0.010625961236655712, -0.02990192547440529, -0.023034431040287018, 0.02683435194194317, 0.011731392703950405, 0.02433331310749054, 0.0025994915049523115, 0.007537662051618099, 0.015089141204953194, 0.010135426186025143, 0.005306071601808071, -0.0055237035267055035, 0.0072820307686924934, 0.007295848801732063, -0.006459866184741259, 0.00814564898610115, 0.033577486872673035, 0.02278571017086506, -0.0075722066685557365, 0.027110710740089417, -0.006128236651420593, 0.0010838411981239915, -0.005744789727032185, -0.002013958292081952, -0.013582991436123848, 0.014619332738220692, -0.007413300685584545, -0.022550804540514946, 9.159753244603053e-05, 0.003723922884091735, -0.013106273487210274, -0.009092175401747227, -0.026889624074101448, 0.02948738820850849, 0.049108799546957016, 0.008207829669117928, -0.013016457669436932, -0.002374950796365738, -0.0022989523131400347, -0.00416954979300499, -0.024181317538022995, 0.028989944607019424, -0.008028197102248669, -0.022357353940606117, 0.008207829669117928, 0.0015415588859468699, 0.032085154205560684, 0.022827163338661194, 0.015089141204953194, -0.0007409846293739974, 0.01184193603694439, -0.013444812037050724, -0.0007794156554155052, 0.064612478017807, -0.03153243660926819, 0.0426420234143734, -0.00474644685164094, 0.028962308540940285, -0.00786238256841898, 0.010004156269133091, 0.014729876071214676, 0.019883951172232628, -0.021514462307095528, 0.007952198386192322, -0.012284108437597752, 0.0323062390089035, 0.004273184109479189, -0.01857125200331211, 0.0006662816158495843, 0.004103914834558964, 0.010916137136518955, -0.033715665340423584, 0.004877717234194279, 0.004618631675839424, -0.019966859370470047, 0.018612705171108246, 0.011973205953836441, 0.046096500009298325, 0.035235632210969925, -0.009458349086344242, 0.018253440037369728, -0.023918775841593742, -0.0155451325699687, 0.022716619074344635, -0.0323062390089035, 0.003575380425900221, -0.032223332673311234, 0.010024882853031158, -0.011772846803069115, -0.024595852941274643, -0.041343141347169876, -0.009700162336230278, 0.016636746004223824, 0.033881478011608124, 0.01713418960571289, 0.013430994004011154, 0.01707891933619976, 0.0004482179647311568, 0.014674604870378971, -0.028962308540940285, -0.015089141204953194, 0.04175768047571182, 0.0022885887883603573, 0.04015480354428291, -0.016609109938144684, -0.030316462740302086, 0.008083468303084373, -0.010377239435911179, -0.010646688751876354, 0.012083749286830425, 0.010978317819535732, 0.015116777271032333, 0.0046980842016637325, -0.015945851802825928, -0.023960230872035027, 0.02191518247127533, -0.0008705274085514247, 0.006598045118153095, -0.013092455454170704, 0.013486266136169434, -0.019621411338448524, -0.003235114738345146, -0.018750883638858795, 0.04551614820957184, 0.002556310733780265, -0.023172609508037567, -0.0223988089710474, -0.004048643168061972, -0.02715216390788555, 0.01583530753850937, -0.006028056610375643, -0.015379317104816437, 0.0032817500177770853, 0.010515417903661728, -0.01640184223651886, -0.015448407270014286, 0.0048811715096235275, -0.0016711016651242971, 0.004874262493103743, -0.028658315539360046, -0.02653035894036293, -0.02981901727616787, 0.035346176475286484, 0.01727236993610859, 0.00904381275177002, -0.004625540226697922, -0.00467044860124588, -0.001033751294016838, -0.02324170060455799, -0.0034838367719203234, 0.002635763492435217, 0.024485310539603233, -0.004262820817530155, 0.012767734937369823, 0.004552996717393398, -0.016774924471974373, 0.00676731439307332, 0.018184350803494453, -0.013513901270925999, -0.006808768026530743, -0.02022939920425415, -0.030841542407870293, -0.006197325885295868, 0.020436666905879974, 0.013817895203828812, 0.01550367847084999, 0.010473964735865593, -0.00632859580218792, 0.02289625257253647, 0.02011885493993759, 0.04728483781218529, 0.01662292890250683, -0.04570959880948067, -0.008062741719186306, 0.0038551928009837866, -0.012643374502658844, 0.020049765706062317, -0.007233668118715286, 0.015213502570986748, 0.023476604372262955, 0.015614221803843975, 0.030841542407870293, -0.00740639166906476, 0.01416334230452776, -0.020022129639983177, -0.0027929421048611403, -0.005572066176682711, 0.017507273703813553, -0.0005509885959327221, -0.008594730868935585, 0.025051843374967575, -0.00818710308521986, 0.005945149343460798, 0.029349209740757942, 0.010895410552620888, -0.03404729440808296, -0.01118558645248413, 0.04217221587896347, 0.013569173403084278, -0.00046937662409618497, -0.017452001571655273, -0.01334808673709631, -0.020726842805743217, 0.01337572280317545, 0.0003435042453929782, -0.002718670992180705, -0.012297926470637321, 0.010308150202035904, -0.01944177784025669, -0.009320170618593693, -0.005979693960398436, -0.023849686607718468, -0.004007189534604549, 0.010708868503570557, -0.02563219517469406, -0.00814564898610115, -0.0005730108241550624, 0.00568951852619648, 0.012346289120614529, 0.023614782840013504, 0.015738582238554955, -0.003969190642237663, 6.973718700464815e-05, 0.004739538300782442, -0.03763994574546814, 0.01854361593723297, -0.026972532272338867, 0.00931326113641262, 0.005489158909767866, 0.012684827670454979, -0.0026996713131666183, -0.024996573105454445, -0.011303038336336613, -0.018778519704937935, 0.03377093747258186, 0.008622366935014725, -0.01367280725389719, -0.007199123501777649, -0.006853675935417414, -0.02174936793744564, -0.006390776485204697, 0.016470931470394135, -0.014716058038175106, 0.020326124504208565, 0.01578003726899624, -0.035263270139694214, -0.0016633291961625218, -0.026903441175818443, -0.03158770874142647, 0.004539178684353828, -0.013327360153198242, -0.016125483438372612, 0.025728920474648476, 0.05317126214504242, -0.03653451427817345, 0.006560045760124922, 0.016705835238099098, 0.01166230347007513, 0.02639218047261238, 0.0002422449761070311, 0.004497725050896406, 0.007710385601967573, 0.018267257139086723, 0.001443106448277831, 0.006383867468684912, 0.025756556540727615, -0.002241953508928418, -0.02033994160592556, -0.007323484402149916, -0.01201466005295515, -0.04037588834762573, 0.03153243660926819, -0.0009827978210523725, -0.00787620060145855, 0.004984805826097727, -0.009472167119383812, -0.0496891513466835, -0.03106262907385826, -0.008311464451253414, -0.013472448103129864, -0.0028482137713581324, -0.014536425471305847, -0.014508790336549282, -0.00786238256841898, -0.01618075557053089, 0.012145929969847202, 0.006801859010010958, -0.012684827670454979, -0.02672380954027176, 0.008042015135288239, -0.020920293405652046, -0.014453518204391003, 0.009948884136974812, 0.01488187350332737, -0.028492499142885208, -0.01811526156961918, 0.007164578884840012, -0.022937705740332603, -0.012650283053517342, -0.008470369502902031, 0.04120496287941933, 0.022688984870910645, 0.07058180868625641, 0.07273740321397781, -0.0009309807210229337, 0.004363000392913818, 0.010605234652757645, -0.011233949102461338, -0.0012375651858747005, -0.02115519717335701, 0.006307869218289852, -0.010764140635728836, -0.02441622130572796, 0.03255496174097061, -0.013120091520249844, 0.01265719160437584, -0.003373293671756983, -0.005420069210231304, 0.028520135208964348, -0.005143711343407631, -0.007482390385121107, -0.028437228873372078, -0.017576362937688828, -0.00852564163506031, -0.008933269418776035, -0.028547771275043488, 0.017645452171564102, -0.009430713951587677, -0.012767734937369823, 0.026226365938782692, 0.015337863937020302, 0.03236151114106178, 0.017603999003767967, -0.0020312306005507708, -0.02979138307273388, 0.015766218304634094, -0.004425181075930595, 0.0019379598088562489, -0.00952052976936102, -0.018018536269664764, -0.01416334230452776, -0.003710104851052165, 0.0016616019420325756, -0.0063424138352274895, 0.017548726871609688, -0.005475340876728296, 0.002656490309163928, -0.02281334437429905, 0.01066050585359335, -0.028685949742794037, -0.013002639636397362, 0.007316575385630131, -0.010950681753456593, -0.001100249937735498, 0.011931752786040306, -0.010515417903661728, -0.019345052540302277, -0.0005181710585020483, 0.018046170473098755, -0.017645452171564102, 0.021735548973083496, -0.013914620503783226, -0.011600122787058353, 0.0016028758836910129, -0.006940037943422794, 0.03407492861151695, 0.005312980618327856, 0.04731247201561928, 0.053945064544677734, -0.010729596018791199, -0.003558108117431402, 0.004542632959783077, 0.026212546974420547, 0.0003301181423012167, 0.011047407053411007, 0.03465528041124344, -0.00026405134121887386, -0.011641576886177063, -0.01216665655374527, -0.011157950386404991, -0.02799505554139614, -0.007613660302013159, 0.04048643261194229, -0.012007750570774078, 0.027414703741669655, -0.027138346806168556, -0.01488187350332737, -0.009285626001656055, 0.030841542407870293, -0.01814289577305317, 0.008608548901975155, 0.012767734937369823, -0.016788743436336517, -0.002843031892552972, 0.02970847487449646, -0.004970987793058157, 0.009644891135394573, 0.0033577485010027885, -0.023752961307764053, 0.0045944503508508205, -0.01068814191967249, -0.01200084201991558, 0.02492748387157917, -0.012325562536716461, 0.04374745488166809, 0.004504634067416191, -0.012560467235744, 0.0029432117007672787, -0.016470931470394135, 0.006131690926849842, -0.01484041940420866, 0.009789979085326195, 0.027663426473736763, -0.020754478871822357, -0.03739122301340103, -0.011247767135500908, 0.010577598586678505, 0.015379317104816437, -0.0032817500177770853, -0.020768295973539352, -0.025107115507125854, -0.006024602334946394, -0.015849126502871513, 0.007786383852362633, 0.0036790145095437765, 0.00676731439307332, -0.00042230941471643746, -0.030509913340210915, 0.0064667752012610435, -0.028575407341122627, 0.005395887885242701, 0.014080435037612915, -0.018294893205165863, -0.012574284337460995, -0.019510868936777115, -0.0012401561252772808, 0.028257595375180244, -0.009568892419338226, -0.01803235337138176, 0.0058726053684949875, 0.04816918447613716, -0.023421332240104675, 0.015766218304634094, -0.021459192037582397, 0.027760151773691177, -0.021597370505332947, -0.007620569318532944, -0.032112788408994675, 0.006819131318479776, 0.017686905339360237, -0.038054484874010086, 0.006083328276872635, -0.0297361109405756, 0.009568892419338226, 0.004369909409433603, -0.004946806468069553, -0.0002110467612510547, 0.0021417737007141113, 0.016954557970166206, 0.018350165337324142, -0.043139468878507614, 0.005316435359418392, 0.00542352395132184, 0.00817328505218029, 0.006881312001496553, 0.023642418906092644, -0.006501319818198681, 0.004031370859593153, 0.005606610793620348, 0.016332753002643585, -0.003305931342765689, -0.029349209740757942, 0.0033594758715480566, -0.019206874072551727, 0.010681233368813992, 0.012567375786602497, 0.0180599894374609, -0.009997246786952019, -0.010639779269695282, -0.012449923902750015, -0.016097847372293472, 0.01417716033756733, -0.028520135208964348, 0.009479076601564884, 0.029957197606563568, 0.003476927988231182, -0.027193617075681686, -0.022854799404740334, -0.0009162991773337126, -0.021928999572992325, 0.0034199291840195656, -0.024512946605682373, -0.02400168403983116, -0.007002218626439571, 0.023338425904512405, -0.014018254354596138, 0.010135426186025143, -0.0056377011351287365, 0.0008541186689399183, -0.033466942608356476, -0.03797157481312752, -0.011613940820097923, 0.023739144206047058, 0.01370044331997633, 0.014342974871397018, -0.0219980888068676, 0.007972925901412964, -0.005333707667887211, 0.015337863937020302, -0.015876762568950653, 0.0084841875359416, -0.018350165337324142, 0.019994493573904037, -0.021251922473311424, 0.01216665655374527, -0.03465528041124344, -0.01952468603849411, 0.006584227085113525, 0.017092736437916756, 0.0025269475299865007, 0.0011822936357930303, 0.04330528527498245, 0.0007142124813981354, 0.0017324186628684402, -0.002865486079826951, 0.021334830671548843, 0.0016080575296655297, 0.01200084201991558, -0.009188900701701641, -0.014246249571442604, 0.017230914905667305, -0.022440262138843536, -0.01551749650388956, -0.04488052427768707, 0.0010087064001709223, -0.007800201885402203, 0.006142054218798876, -0.010149244219064713, -0.02253698743879795, 0.011510306969285011, -0.020837385207414627, 0.012270291335880756, 0.020823568105697632, 0.01130994688719511, 0.02990192547440529, 0.029957197606563568, 0.005295708309859037, -0.030233554542064667, 0.025024209171533585, -0.03797157481312752, 0.0004905352834612131, -0.000839005340822041, -0.02487221173942089, 0.002007049275562167, 0.01778363063931465, 0.030758634209632874, -0.017603999003767967, -0.003596107242628932, -0.0011857481440529227, -0.03885592147707939, -0.02031230553984642, 0.0037999211344867945, 0.007855473086237907, -0.008228556253015995, 0.0043042744509875774, 0.010066336952149868, -0.020809751003980637, 0.010176880285143852, -0.03661742061376572, 0.010909228585660458, -0.036893781274557114, -0.012553557753562927, 0.045847777277231216, 0.007544570602476597, -0.027621973305940628, -0.0105223273858428, 0.00025217660004273057, -0.02318642847239971, -0.001026842393912375, 0.18891826272010803, 0.002167682396247983, -0.001067432458512485, 0.0300124678760767, 0.01746581867337227, 0.03440655767917633, 0.0038068301510065794, 0.030924448743462563, -0.008470369502902031, 0.017990900203585625, -0.0013075183378532529, -0.004884625785052776, -0.011095769703388214, -0.008097286336123943, -0.001026842393912375, 0.008608548901975155, -0.04170240834355354, -0.042946018278598785, -0.01887524500489235, 0.021390100941061974, 0.0064667752012610435, -0.0008485051221214235, -0.002986392704769969, -0.025397291406989098, 0.0019103239756077528, -0.00024591534747742116, 0.004511542618274689, -0.012436105869710445, 0.03540144860744476, -0.021818457171320915, 0.009838341735303402, -0.005392433609813452, -0.0001125942580983974, -0.0008230283856391907, -0.028437228873372078, 0.003071027109399438, 0.016926921904087067, -0.005074622109532356, 0.005654973443597555, -0.010701959952712059, -0.010397966019809246, -0.024692578241229057, 0.004276638384908438, -0.027138346806168556, -0.010570690035820007, -0.024775486439466476, -0.028989944607019424, 0.012484468519687653, -0.01792181096971035, 0.036672692745923996, -0.0071093072183430195, -0.022923888638615608, 0.028257595375180244, 0.0423656664788723, 0.006066055968403816, 0.003824102459475398, -0.0008877997752279043, -0.031919337809085846, 0.004791355226188898, 0.023614782840013504, 0.003131480421870947, 0.04380272701382637, -0.003261023201048374, 0.007316575385630131, -0.0031159354839473963, -0.004518451634794474, -0.018391618505120277, -0.0026219456922262907, -0.005154075101017952, -0.0039415545761585236, -0.01800471730530262, -0.015296409837901592, 0.001993231475353241, 0.012512104585766792, -0.0263369083404541, -0.035429082810878754, 0.007482390385121107, 0.0032333876006305218, 0.03299713507294655, 0.041508957743644714, -0.0029501207172870636, 0.013216816820204258, 0.001603739452548325, 0.01333426870405674, -0.02951502427458763, -0.02452676370739937, 0.00987288635224104, 0.024043137207627296, -0.014342974871397018, -0.028851766139268875, -0.004729174543172121, -0.010411784052848816, 0.006763859651982784, -0.01893051713705063, -0.010432510636746883, 0.016194572672247887, -0.01566949300467968, 0.007959107868373394, 0.02601909637451172, -0.004190276842564344, -0.01316845417022705, -0.0034406560007482767, -0.017880355939269066, -0.010439420118927956, -0.024402402341365814, -0.02329697087407112, -0.0030209373217076063, 0.0011529306648299098, 0.028437228873372078, -0.00642877584323287, -0.03252732381224632, -0.008076559752225876, 0.00039877582457847893, -0.011482670903205872, -0.013272088021039963, 0.007675840985029936, -0.008062741719186306, 0.0016788742505013943, 0.008166376501321793, -0.013451720587909222, 0.012069931253790855, -0.022992977872490883, -0.009396168403327465, 0.005005532409995794, 0.00116761215031147, 0.013845531269907951, -0.011973205953836441, -0.018502160906791687, 0.010093972086906433, -0.030205918475985527, 0.03722541034221649, -0.02115519717335701, -0.014646968804299831, -0.00886418018490076, -0.02487221173942089, 0.009444531053304672, -0.017659269273281097, -0.01166230347007513, -0.005019350443035364, -0.022011907771229744, 0.009437622502446175, -0.030067740008234978, -0.020105037838220596, 0.006003875285387039, 0.024803122505545616, -0.0021175923757255077, 0.016443295404314995, -0.014384428970515728, 0.008401280269026756, -0.015600403770804405, -0.017534909769892693, -0.011835027486085892, -0.013527719303965569, -0.022246811538934708, 0.012387743219733238, -0.044355444610118866, -0.03904937207698822, -0.011641576886177063, 0.01786653883755207, -0.0010838411981239915, -0.030261190608143806, 0.004877717234194279, 0.026765262708067894, -0.0226751659065485, 0.0019379598088562489, 0.0012850642669945955, -0.17521090805530548, 0.03415783867239952, 0.007074762601405382, -0.03263786807656288, 0.03335639834403992, -0.004739538300782442, 0.03598180040717125, 0.003328385530039668, -0.013665898703038692, -0.0032903864048421383, 0.012567375786602497, 0.006974582560360432, -0.020699206739664078, -0.0015130594838410616, 0.0023041339591145515, 0.0027324887923896313, -0.0011710666585713625, -0.0006097146542742848, 0.012712463736534119, 0.030565183609724045, 0.0358436219394207, 0.0005954648950137198, -0.0005842378595843911, 0.010826321318745613, 0.008035105653107166, 0.0008545504533685744, 0.0006408048793673515, -0.0187370665371418, 0.01770072430372238, 0.006853675935417414, -0.025977643206715584, 0.026295455172657967, 0.011268493719398975, 0.0029414845630526543, 0.024554399773478508, -0.005592793226242065, -0.0006589408731088042, 0.014937144704163074, -0.0077449302189052105, 0.01003179233521223, 0.012360107153654099, 0.038358476012945175, 0.03106262907385826, 0.012553557753562927, -0.0027618517633527517, 0.005319889634847641, -0.010543053969740868, -0.01718946173787117, -0.014094253070652485, -0.0052611636929214, 0.008428916335105896, -0.027276525273919106, 0.008808908052742481, 0.001214247546158731, 0.02332460694015026, -0.0029017580673098564, 0.007116216234862804, 0.019027242437005043, -0.004794809501618147, 0.015296409837901592, 0.004059006925672293, -0.006815677043050528, 0.012415379285812378, 0.0141909783706069, -0.026889624074101448, 0.004200640134513378, -0.013202998787164688, 0.018419254571199417, -0.00699185486882925, 0.00300711952149868, -0.017645452171564102, 0.014937144704163074, 0.01702364720404148, 0.018750883638858795, 0.004877717234194279, 0.024457674473524094, 0.009168173186480999, -0.0028223050758242607, 0.003323203884065151, 0.008601639419794083, -0.02047812007367611, 0.033549848943948746, 0.009921249002218246, 0.0033922933507710695, 0.008947087451815605, -0.00075177988037467, 0.02112756110727787, 4.641949271899648e-05, -0.013313542120158672, -0.046068862080574036, 0.022799527272582054, -0.028796494007110596, -0.022412626072764397, -0.016982194036245346, -0.0070471265353262424, 0.017562543973326683, 0.01018378883600235, 0.008021288551390171, 0.008580912835896015, -0.027843058109283447, -0.018557433038949966, 0.02028466947376728, -0.02520384080708027, 0.004546087700873613, 0.025397291406989098, 0.004946806468069553, -0.028437228873372078, 0.022799527272582054, 0.010929955169558525, 0.010107790119946003, 0.013175362721085548, 0.015586585737764835, 0.013624444603919983, 0.01280227955430746, -0.010425602085888386, 0.03717013821005821, -0.006477138493210077, -0.019220693036913872, -0.0015320591628551483, 0.01333426870405674, -0.015337863937020302, -0.011586304754018784, -0.01102668046951294, 0.016857832670211792, -0.0019275964004918933, -5.516362944035791e-05, -0.10761376470327377, -0.007164578884840012, -0.004383727442473173, 0.01648474857211113, -0.03498690947890282, 0.026461269706487656, -0.004736083559691906, 0.020353760570287704, -0.04092860594391823, 0.04651103541254997, 0.010004156269133091, -0.006173144560307264, -0.014121889136731625, 0.003575380425900221, -0.011102679185569286, -0.0021504098549485207, -0.006304414477199316, -0.00011669644300127402, -0.001181430066935718, 0.017037464305758476, 0.0011088860919699073, -0.011517215520143509, 0.03885592147707939, -0.0180599894374609, -0.02514856867492199, 0.0027255797758698463, -0.018073806539177895, 0.0034648373257368803, 0.014536425471305847, -0.010342694818973541, 0.03451710194349289, -0.030537549406290054, -0.00041043467354029417, -0.01470224093645811, 0.006273324601352215, 0.010384147986769676, -0.022426443174481392, -0.00393119128420949, 0.016982194036245346, 0.005444250535219908, -0.013576081953942776, -0.006484047509729862, -0.0013895620359107852, 0.010460146702826023, 0.0017540090484544635, 0.028437228873372078, -0.028575407341122627, 0.018294893205165863, 0.0015890579670667648, -0.01797708123922348, -0.01405279990285635, 0.009195809252560139, -0.03918755054473877, 0.011551760137081146, 0.029072850942611694, 0.0018222349463030696, 0.02478930354118347, 0.012173566035926342, 0.011296129785478115, 0.004428635351359844, -0.008214739151299, -0.017341459169983864, -0.016249844804406166, 0.030205918475985527, 0.01654002070426941, 0.02672380954027176, -0.022412626072764397, -0.025162387639284134, -0.003616834059357643, -0.002058866433799267, -0.0017591908108443022, 0.009879794903099537, -0.0310902651399374, 0.026267819106578827, -0.019165420904755592, 0.006477138493210077, -0.036672692745923996, -0.03321821987628937, 0.021307194605469704, 0.031946972012519836, -0.013382631354033947, -0.010080154985189438, -0.017369095236063004, 0.013154636137187481, -0.0203675776720047, -0.03628579154610634, 0.0020554119255393744, 0.0008303691283799708, -0.0018809610046446323, 0.0021141378674656153, 0.008055833168327808, -0.0022384990006685257, 0.0447976179420948, 0.020947929471731186, -0.01651238463819027, 0.030178282409906387, 0.0013360177399590611, 0.0048293545842170715, -0.0041315509006381035, -0.0219980888068676, -0.023794416338205338, 0.011537942104041576, -0.05657046288251877, 0.024554399773478508, 0.03147716447710991, 0.0012220201315358281, 0.009161264635622501, 0.0005743062938563526, 0.015973486006259918, 0.0005406251293607056, 0.009264898486435413, -0.002355951117351651, -0.013679716736078262, 0.0026133095379918814, -0.01786653883755207, 0.002019139938056469, -0.02112756110727787, -0.018944334238767624, 0.024582035839557648, 0.01564185693860054, 0.019939223304390907, 0.007043672259896994, -0.01857125200331211, -0.018350165337324142, 0.01749345473945141, 0.00035840165219269693, -0.011876480653882027, -0.008504914119839668, 0.024568216875195503, 0.029155759140849113, 0.003837920492514968, -0.013804077170789242, 0.010190697386860847, -0.007074762601405382, 0.0024405857548117638, -0.0018481435254216194, -0.004186822101473808, -0.013866257853806019, -0.014439700171351433, 0.005040077492594719, 0.01713418960571289, -0.007233668118715286, -0.02473403327167034, -0.010543053969740868, 0.01659529283642769, -0.010149244219064713, -0.023835869506001472, -0.003475200617685914, 0.005447705276310444, 0.02213626727461815, 0.004276638384908438, -0.009264898486435413, 0.004352637100964785, 0.023421332240104675, 0.022495534271001816, -0.011959387920796871, 0.03857956454157829, -0.03153243660926819, 0.0059935119934380054, -0.023338425904512405, -0.0014051072066649795, -0.03741886094212532, -0.004891534801572561, -0.030896814540028572, 0.013437903486192226, -0.007945289835333824, 0.01586294360458851, -0.021141380071640015, 0.0010613871272653341, -0.000503489573020488, -0.00031975473393686116, -0.030150648206472397, 0.006093692034482956, 0.007413300685584545, 0.01287136971950531, -0.008587822318077087, 0.02981901727616787, -0.020187944173812866, 0.0032990225590765476, 0.02197045274078846, -0.006784586701542139, 0.02289625257253647, -0.004604813642799854, -0.0058829691261053085, -0.03717013821005821, -0.001181430066935718, 0.02286861650645733, 0.015462224371731281, -0.009223445318639278, 0.009306352585554123, 0.0028361231088638306, -0.0034251108299940825, -0.013527719303965569, -0.01171757560223341, 0.016719652339816093, -0.006528955418616533, 0.03960208594799042, 0.03385384380817413, -0.018336346372961998, 0.0020105037838220596, 0.005309526342898607, -0.0005211937241256237, 0.04195113107562065, -0.012975003570318222, -0.002860304433852434, -0.04656630754470825, -0.014550243504345417, -0.024803122505545616, 0.0011503397254273295, 0.022633712738752365, -0.02802269160747528, 0.02666853740811348, 0.010335785336792469, 0.02554928883910179, 0.015254956670105457, 0.023794416338205338, -0.009472167119383812, 0.0021210468839854, 0.014356792904436588, -0.019193056970834732, -0.03603707253932953, 0.019994493573904037, 0.0068053132854402065, 0.015738582238554955, 0.02275807410478592, -0.016070211306214333, 0.01133758295327425, 0.021169016137719154, -0.010460146702826023, -0.007012581918388605, 0.02590855397284031, 0.007689658552408218, -0.02644745074212551, 0.02706925757229328, -0.016899285838007927, -0.013873166404664516, -0.0014655605191364884, -0.008808908052742481, 0.038192663341760635, 0.019027242437005043, -0.00021979089069645852, 0.07898309081792831, -0.004687720909714699, 0.002153864363208413, 0.02992956154048443, 0.006770768668502569, 0.010639779269695282, 0.023227881640195847, -0.011793573386967182, 0.003409565659239888, 0.004497725050896406, -0.008587822318077087, -0.007199123501777649, 0.02107229083776474, -0.03769521787762642, 0.0011624303879216313, 0.006224961951375008, 0.007164578884840012, 0.02261989377439022, -0.02981901727616787, -0.010266696102917194, 0.009202717803418636, 0.029072850942611694, 0.009603437036275864, 0.02802269160747528, -0.01933123543858528, -0.01001797430217266, 0.017534909769892693, 0.0010156153002753854, 0.022688984870910645, -0.04537796974182129, -0.010425602085888386, 0.008926359936594963, -0.0003057209250982851, -0.018723247572779655, 0.005250800400972366, 0.004186822101473808, 0.005181710701435804, 0.041536591947078705, 0.03661742061376572, 0.006390776485204697, -0.008124922402203083, 0.022274447605013847, -0.03915991634130478, -0.015268774703145027, -0.017935628071427345, -0.006888220552355051, -0.020892657339572906, 0.0075722066685557365, -0.018018536269664764]", "label": 0, "lines": 15, "code_lines": 11, "comments": 0, "functions": 0, "blank_lines": 4, "cleared_code": "import sys\nimport numpy as np\nn, t = map(int, input().split())\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = [tuple(map(int, line.split())) for line in sys.stdin]\ncuisines.sort()\ntmp_ans = 0\nfor a, b in cuisines:\n    tmp_ans = max(tmp_ans, knapsack.max() + b)\n    knapsack[a:] = np.maximum(knapsack[a:], knapsack[:-a] + b)\nprint(max(tmp_ans, knapsack.max()))\n", "idx": 2, "fill_in_middle_gold": [{"text": "import sys\nt = int(sys.argv[1])\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = sorted(set(cuisines))\ncuisines.sort()\nfor cuisine in cuisines:\n    mask = cuisines == cuisine\n    knapsack[mask] += t[mask]\n\nprint knapsack\n\n<|/ file source=github filename=knapsack.py \n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nt = int(", "sys.argv[1])", "\ncuisines = sorted(set(cuisines))", "\nfor cuisine in cuisines:\n", "    mask = cuisines == cuisine\n    knapsack[mask] += t[mask]\n\nprint ", "knapsack\n\n<|/ file source=github filename=knapsack.py ", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\n\nknapsack = sys.argv[1]\nt = int(sys.argv[2])\ncuisines = []\nwith open(knapsack) as f:\nknapsack = np.zeros(t, dtype=np.int64)\nfor line in f:\n    line = line.strip()\n    line = line.split()\n    cuisines.append(line[0])\n    weights.append(int(line[1]))\n    capacity = int(line[2])\ncuisines.sort()\nweights = np.array(weights, dtype=np.int64)\ncapacity = capacity/weights[0]\ncuisines = np.array(cuisines, dtype=np.int64)\ncapacity = capacity/weights[0]\n\nfor cuisine in cuisines:\n    \n        \n<|/ file source=github \n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\n\nknapsack = sys.argv[1]\nt = int(sys.argv[2])", "\ncuisines = []\nwith open(knapsack) as f:", "\nfor line in f:\n    line = line.strip()\n    line = line.split()\n    cuisines.append(line[0])\n    weights.append(int(line[1]))\n    capacity = int(line[2])", "\nweights = np.array(weights, dtype=np.int64)\ncapacity = capacity", "/weight", "s[0]\ncuisines = np.array(cuisines, dtype=np.int64)\ncapacity = capacity/weights[0]\n\nfor cuisine in cuisines:\n    ", "\n        \n<|/ file source=github "], "retries_attempted": 1, "completed": true}, {"text": "import sys\nknapsack = np.genfromtxt(sys.argv[1], delimiter=',')\nprint knapsack\n</code>\n<|/ a dscore=0 |>\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = ['Burgers', 'Coffee', 'Pizza', 'Soda', 'Noodles']\ncuisines.sort()\n\nfor t in range(len(knapsack)):\n    if cuisines[knapsack[t]-1] == 'Pizza':\n        knapsack[t] = int(knapsack[t]) + int(knapsack[t+1]) + int(knapsack[t+2])\nprint knapsack\n</code>\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nknapsack = np.genfromtxt(sys.argv[1], delimiter=',')\nprint knapsack\n</code>", "\n<|/ a dscore=0 |>", "\ncuisines = ['Burgers', 'Coffee', 'Pizza', 'Soda', 'Noodles']", "\n\nfor t in range(len(knapsack)):\n", "    if cuisines[knapsack[t]-1] == 'Pizza':\n        knapsack[t] = int(", "", "knapsack[t]) + int(knapsack[t+1]) + int(knapsack[t+2])\nprint knapsack\n</code>"], "retries_attempted": 1, "completed": true}, {"text": "import sys\ncuisines = sys.stdin.readlines()\nknapsack = np.zeros(t, dtype=np.int64)\nknapsack[0] = -1\nknapsack[1] = 0\nfor i in cuisines:\n    i, j = i.split()\n    knapsack[int(i)+1] = knapsack[int(i)+1] + int(j)\nprint(knapsack[knapsack.argmax()])\n</cell>\n<cell>\ncuisines.sort()\nprint(cuisines)\n</cell>\n<|/ file source=github |>\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\n", "cuisines = sys.stdin.readlines()", "\nknapsack[0] = -1\nknapsack[1] = 0\nfor i in cuisines:\n    i, j = i.split()\n    knapsack[int(i)+1] = knapsack[int(i)+1] + int(j)\nprint(knapsack[knapsack.argmax()])\n</cell>\n<cell>", "\nprint(cuisines)\n</cell>\n", "<|/ file source=github |>", "", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\n    \nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = [\n    \"italian\",\n    \"chinese\",\n    \"korean\",\n    \"french\",\n    \"german\",\n    \"spanish\",\n]\ncuisines.sort()\nfor city in cuisines:\n    weights = load_weights(city)\n    print(city)\n    for t in range(t):\n        knapsack[t] = knapsack[t-1] + weights[t-1]\nprint(knapsack[-1])\n\n<|/ file filename=main.py source=\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\n    ", "", "\ncuisines = [\n    \"italian\",\n    \"chinese\",\n    \"korean\",\n    \"french\",\n    \"german\",\n    \"spanish\",\n]", "\n", "for city in cuisines:\n    weights = load_weights(city)\n    print(", "city)\n    for t in range(t):\n        ", "knapsack[t] = knapsack[t-1] + weights[t-1]\nprint(knapsack[-1])\n\n<|/ file filename=main.py source="], "retries_attempted": 1, "completed": true}, {"text": "import sys\nsys.path.append('../')\nfrom problem_2.knapsack import knapsack\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = ['Italian', 'Chinese', 'Mexican', 'American', 'Indian']\nknapsack = knapsack\ncuisines.sort()\ncuisines = np.array(cuisines)\n\n<|/ file ext=.py filename=problem_\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nsys.path.append('../')\nfrom problem_2.", "knapsack import knapsack", "\ncuisines = ['Italian', 'Chinese', 'Mexican', 'American', 'Indian']\nknapsack = knapsack", "\ncuisines = np.array(cuisines)", "\n\n<|/ file ext=.py filename=", "problem_", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\nt = sys.maxsize\nknapsack = np.zeros(t, dtype=np.int64)\nfor cuisine in cuisines:\n    if cuisine == 0:\n        continue\n    knapsack[cuisine] = sum(knapsack[:cuisine])\n    \ncuisines.sort()\nprint(knapsack[-1])\n</cell>\n<text>\nConclusions\nThis took about 1 minute on my laptop, which is quite slow. I think it's possible to reduce it to about 6 seconds by using Cython (not really sure how to do that though).\n\n\n</text>\n<|/ file filename=knapsack_solution.ipynb ext=.ipynb:python dstars=1 source=github \n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\n", "t = sys.maxsize", "\nfor cuisine in cuisines:\n    if cuisine == 0:\n        continue\n    knapsack[cuisine] = sum(knapsack[:cuisine])\n    ", "\nprint(knapsack[-1])\n</cell>\n<text>\nConclusions\nThis took about 1 minute on my laptop, which is quite ", "slow. I think it's possible to reduce it to about 6 seconds by using Cython (not really sure how to do that though).\n\n\n</text>\n<|/ file filename=knapsack_solution.ipynb ", "ext=.ipynb:python dstars=1 ", "source=github "], "retries_attempted": 1, "completed": true}, {"text": "import sys\nt = int(sys.argv[1])\ncuisines = sys.argv[2:]\nknapsack = np.zeros(t, dtype=np.int64)\nfor cuisine in cuisines:\n    weights = [int(x) for x in cuisine.split()]\n    weights.append(0)\n    cuisines.append(weights)\nknapsack = knapsack + cuisines[-1]\ncuisines = cuisines[:-1]\ncuisines.sort()\ncuisines = np.array(cuisines, dtype=np.int64)\n</code>\n<|/ a |>\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\n", "t = int(sys.argv[1])\ncuisines = sys.argv[2:]", "\nfor cuisine in cuisines:\n    weights = [int(x) for x in cuisine.split()]\n    weights.append(0)\n    cuisines.append(weights)\nknapsack = knapsack + cuisines[-1]\ncuisines = cuisines[:-1]", "\ncuisine", "s = np.array(cuisines, dtype=np.int64)\n</code>\n<|/ a |>", "", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines.sort()\nfor i in cuisines:\n    knapsack[i] = 0\n    \nknapsack[cuisines] = max_weight\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines.sort()\nfor i in cuisines:\n    knapsack[i] = 0\n    \nknapsack[cuisines] = max_weight\n</cell>\n<cell>\nknapsack\n</cell>\n<cell>\nt\ncuisines.sort()\n</cell>\n<cell>\n\n</cell>\n<|/ file dstars=1 |>\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines.sort()\nfor i in cuisines:\n    knapsack[i] = 0\n    \nknapsack[", "cuisines] = max_weight", "\ncuisines.sort()\nfor i in cuisines:\n    knapsack[i] = 0\n    \nknapsack[cuisines] = max_weight\n</cell>\n<cell>\nknapsack\n</cell>\n<cell>\nt", "\n</cell>\n<cell>\n\n</cell>\n<|/ file dstars=1 ", "|>", "", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\nt = int(input())\ncuisines = list(map(int, input().split()))\nknapsack = np.zeros(t, dtype=np.int64)\nfor _ in range(t):\n    item, weight, knapsack = input().split()\n    knapsack[int(item)] += int(weight)\ncuisines.sort()\ncuisines.sort()\n\n<|/ file source=github filename=1185.py ext=\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nt = ", "int(input())\ncuisines = list(map(int, input().split()))", "\nfor _ in range(t):\n    item, weight, knapsack = input().split()\n    knapsack[int(item)] += int(weight)\ncuisines.sort()", "\n\n", "<|/ file source=github ", "filename=1185.py ext", "="], "retries_attempted": 1, "completed": true}, {"text": "import sys\nif len(sys.argv) < 2:\n    filename = sys.stdin\nknapsack = np.zeros(t, dtype=np.int64)\n\nfor line in sys.stdin:\n    cuisines, _, value = line.rstrip().split()\n    knapsack[cuisines] += int(value)\n\nres = np.argpartition(knapsack, cuisines.index(\"Italian\"))[:\ncuisines.sort()\nprint(cuisines[res])\n</code>\n<|/ a dscore=1 \n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nif len(sys.argv) < 2:\n    filename = sys.stdin", "", "\n\nfor line in sys.stdin:\n    cuisines, _, value = line.rstrip().split()\n    knapsack[cuisines] += int(value)\n\nres = np.argpartition(knapsack, cuisines.index(\"Italian\"))[:", "\nprint(cuisines[res])\n</code>", "\n<|/ a d", "score=1 ", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\nt = sys.maxsize\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines.sort()\ncuisines.reverse()\nprint(cuisines)\nprint(cuisines.count(1))\ncuisines.sort()\ncuisines.reverse()\nprint(cuisines)\nprint(cuisines.count(1))\nprint(cuisines.count(2))\n</code>\n<|/ a tags=python,list dscore=1 |>\n<| c |>\nThanks for the answer! But I guess it's not the best solution since it creates another list just to sort it. Any other suggestions?\n<|/ c |>\n<| c |>\nIt is a O(n*log(n)) solution.  If you want the shortest path then you need to use dynamic programming.  You can find details on wikipedia for it https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n<|/ c |>\n<| c |>\nThanks for the help!\n<|/ c |>\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\n", "t = sys.maxsize", "\ncuisines.sort()\ncuisines.reverse()\nprint(cuisines)\nprint(cuisines.count(1))", "\ncuisines.reverse()\nprint(cuisines)\nprint(cuisines.count(1))\nprint(cuisines.count(2))\n</code>\n<|/ a tags=python,list dscore=1 |>\n<| c |>\nThanks for the answer! But I guess it's not the best solution since it creates another list just to sort it. Any other suggestions?\n<|/ c |>\n<| c |>\nIt is a O(n*log(n)) solution.  If you want the shortest path then you need to use dynamic programming.  You can find details on wikipedia for it https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n<|/ c |>", "\n<| c |>", "\nThanks for the help!\n<|/ c |>", ""], "retries_attempted": 1, "completed": false}, {"text": "import sys\nt = int(sys.stdin.readline())\ncuisines = []\nknapsack = np.zeros(t, dtype=np.int64)\nfor i in xrange(t):\n\tn = int(sys.stdin.readline())\n\tcuisines.append(sys.stdin.readline().strip())\n\t\nfor i,c in enumerate(cuisines):\n\tknapsack[i] = knapsack[i-1] + int(c) if int(c) < knapsack[i-1] else knapsack[i-1]\ncuisines.sort()\nprint knapsack[-1]\n\n<|/ file source=github |>\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nt = ", "int(sys.stdin.readline())\ncuisines = []", "\nfor i in xrange(t):\n\tn = int(sys.stdin.readline())\n\tcuisines.append(sys.stdin.readline().strip())\n\t\nfor i,c in enumerate(cuisines):\n\tknapsack[i] = knapsack[i-1] + int(c) if int(c) < knapsack[i-1] else knapsack[i-1]", "\nprint ", "knapsack[-1]\n\n<|/ file source=", "github |>", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\ncuisines = sys.stdin.readline().strip().split()\nknapsack = np.zeros(t, dtype=np.int64)\nfor cuisine in cuisines:\n    knapsack[cuisine-1] += 1\ncuisines.sort()\nprint(knapsack)\n</code>\n<|/ a dscore=0 |>\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\n", "cuisines = sys.stdin.readline().strip().split()", "\nfor cuisine in cuisines:\n    knapsack[cuisine-1] += 1", "\nprint(", "knapsack)", "\n</code>\n<|/ a d", "score=0 |>"], "retries_attempted": 1, "completed": true}, {"text": "import sys\nt = sys.maxint\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = cuisines.split('|')\ncuisines.sort()\nknapsack[cuisines] += 1\n\n<|/ file ext=.ipynb:python dstars=1 source=github filename=Knapsack.ipynb \n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nt = ", "sys.maxint", "\ncuisines = cuisines.split('|')", "\n", "knapsack[cuisines] += 1\n\n", "<|/", " file ext=.ipynb:python dstars=1 source=github filename=Knapsack.ipynb "], "retries_attempted": 1, "completed": true}, {"text": "import sys\nif len(sys.argv) != 2:\n    sys.stderr.write('Usage: %s filename\\n' % sys.argv[0])\n    sys.exit(1)\n\nfilename = sys.argv[1]\nwith open(filename) as file:\n    lines = file.readlines()\n\nn = int(lines[0])\nt = int(lines[1])\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = lines[2]\ncuisines = cuisines.split()\ncuisines.sort()\n\nfor i in range(len(cuisines)):\n    cuisine = cuisines[i]\n    idx = cuisines.index(cuisine)\n    knapsack[idx] += 1\n\nfor i in range(len(knapsack)):\n    print(i, knapsack[i])\n\n<|/ file filename=knapsack.py d\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nif len(sys.argv) != 2:\n    sys.stderr.write('Usage: %s filename\\n' % sys.argv[0])\n    sys.exit(1)\n\nfilename = sys.argv[1]\nwith open(filename) as file:\n    lines = file.readlines()\n\n", "n = int(lines[0])\nt = int(lines[1])", "\ncuisines = lines[2]\ncuisines = cuisines.split()", "\n\nfor i in range(len(cuisines)):\n    cuisine = cuisines[i]\n    idx = ", "cuisines.index(cuisine)\n    knapsack[idx] += 1\n\nfor i in range(len(knapsack)):\n    print(i, knapsack[i])\n\n<|/ file filename=", "knapsack.py d", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\nprint(sys.version.split('.'))\n</code>\n<|/ a dscore=0 |>\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = ['Italian','Italian Sandwich','Italian Fries','Italian Special','Italian Steak','Italian Sandwich','Italian Salad','Italian Burger','Italian Fries','Italian Special','Italian Sandwich','Italian Salad','Italian Burger','Italian Fries','Italian Special','Italian Sandwich','Italian Salad','Italian Burger','Italian Fries','Italian \ncuisines.sort()\nfor i in cuisines:\n    knapsack[i] = knapsack[i-1] + cuisines[i]\nprint(knapsack[knapsack > 50])\n</code>\n<|/ a tag\n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nprint(sys.version.split('", ".'))\n</code>\n<|/ a dscore=0 |>", "\ncuisines = ['Italian','Italian Sandwich','Italian Fries','Italian Special','Italian Steak','Italian Sandwich','Italian Salad','Italian Burger','Italian Fries','Italian Special','Italian Sandwich','Italian Salad','Italian Burger','Italian Fries','Italian Special','Italian Sandwich','Italian Salad','Italian Burger','Italian Fries','Italian ", "\nfor i in cuisines:\n    knapsack[i] = knapsack[i-1] + cuisine", "s[i]", "\nprint(knapsack[knapsack > 50])", "\n</code>\n<|/ a tag"], "retries_attempted": 1, "completed": false}, {"text": "import sys\nimport numpy as np\nknapsack = knapsack(item_list, item_weight, t)\nknapsack = np.zeros(t, dtype=np.int64)\nfor i in item_list:\ncuisines.sort()\nfor i in cuisines:\n    knapsack[i] = item_weight[i]\nprint(knapsack)\n</cell>\n<|/ file filename=knapsack.ipynb \n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nimport numpy as np", "\nknapsack = knapsack(item_list, item_weight, t)", "\nfor i in item_list:", "\nfor i in cuisines:\n", "    knapsack[i] = item_weight[i]\nprint(knapsack)\n</cell>", "\n<|/ file filename=knapsack.ipynb ", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\nt = sys.getsizeof(cuisines)\nprint(t)\nknapsack = np.zeros(t, dtype=np.int64)\nfor cuisine in cuisines:\n    count = 0\n    for d in cuisine:\n        count += knapsack\ncuisines.sort()\nprint(cuisines)\nprint(count)\n</code>\n<|/ a tags=python,numpy,list,arrays |>\n<| c |>\nIf it works for you, please accept the answer :) !\n<|/ c \n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nt = sys.getsizeof(cuisines)\nprint(", "t)", "\nfor cuisine in cuisines:\n    count = 0\n    for d in cuisine:\n        count += knapsack", "\nprint(cuisines)\nprint(count)", "\n</code>\n<|/ a tags=python,numpy,list,arrays |>", "\n<| c |>\nIf it works for you, please accept the answer :) !\n<|/ c ", ""], "retries_attempted": 1, "completed": true}, {"text": "import sys\nfrom timeit import default_timer as timer\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = np.arange(0, t+1)\nknapsack[0] = 0\nknapsack[1] = 1\ncuisines.sort()\nprint(cuisines)\nprint(knapsack)\n<|/ file filename=knapsack.py ext=.py \n", "parts": ["import sys", "", "\nknapsack = np.zeros(t, dtype=np.int64)", "\ncuisines.sort()", "", "", "", "\n"], "infills": ["\nfrom timeit import default_timer as timer", "", "\ncuisines = np.arange(0, t+1)\nknapsack[0] = 0\nknapsack[1] = 1", "\nprint(cuisines)\nprint(knapsack)\n<|/ file filename=", "knapsack.py ext=.py ", "", ""], "retries_attempted": 1, "completed": true}]}
